import os
import pandas as pd
import sqlite3
from pathlib import Path

column_specs = [
    {"name": "FILEID", "start": 1, "length": 6},
    {"name": "STUSAB", "start": 7, "length": 2},
    {"name": "SUMLEVEL", "start": 9, "length": 3},
    {"name": "GEOCOMP", "start": 12, "length": 2},
    {"name": "CHARITER", "start": 14, "length": 3},
    {"name": "CIFSN", "start": 17, "length": 2},
    {"name": "LOGRECNO", "start": 19, "length": 7},
    {"name": "REGION", "start": 26, "length": 1},
    {"name": "DIVISION", "start": 27, "length": 1},
    {"name": "STATE", "start": 28, "length": 2},
    {"name": "COUNTY", "start": 30, "length": 3},
    {"name": "TRACT", "start": 55, "length": 6},
    {"name": "COUNTYCC", "start": 101, "length": 2},
    {"name": "COUNTYSC", "start": 103, "length": 2}
]

def parse_line(line):
    parsed_data = {}
    for field in column_specs:
        start = field["start"] - 1
        end = start + field["length"]
        parsed_data[field["name"]] = line[start:end].strip()
    return parsed_data

def process_geo_file(file_path, output_dir):
    state_abbr = os.path.basename(file_path)[:2].upper()
    parsed_records = []
    
    with open(file_path, 'r', encoding='latin-1') as file:
        for line in file:
            parsed_record = parse_line(line)
            parsed_records.append(parsed_record)
    
    df = pd.DataFrame(parsed_records)
    
    db_file = os.path.join(output_dir, f"{state_abbr}_census_2010.db")
    conn = sqlite3.connect(db_file)
    cursor = conn.cursor()
    
    create_table_sql = """
    CREATE TABLE IF NOT EXISTS sf1_data_2010 (
        FILEID TEXT,
        STUSAB TEXT,
        SUMLEVEL INTEGER,
        GEOCOMP TEXT,
        CHARITER TEXT,
        CIFSN TEXT,
        LOGRECNO INTEGER,
        REGION TEXT,
        DIVISION TEXT,
        STATE TEXT,
        COUNTY TEXT,
        TRACT TEXT,
        COUNTYCC TEXT,
        COUNTYSC TEXT
    )
    """
    cursor.execute(create_table_sql)
    
    insert_query = """
    INSERT INTO sf1_data_2010 (FILEID, STUSAB, SUMLEVEL, GEOCOMP, CHARITER, CIFSN, LOGRECNO, REGION, DIVISION, STATE, COUNTY, TRACT, COUNTYCC, COUNTYSC)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    """
    
    for _, record in df.iterrows():
        data_tuple = (
            record['FILEID'], record['STUSAB'], record['SUMLEVEL'], record['GEOCOMP'],
            record['CHARITER'], record['CIFSN'], record['LOGRECNO'], record['REGION'],
            record['DIVISION'], record['STATE'], record['COUNTY'], record['TRACT'],
            record['COUNTYCC'], record['COUNTYSC']
        )
        try:
            cursor.execute(insert_query, data_tuple)
        except sqlite3.OperationalError as e:
            print(f"SQLite Error: {e}")
    
    conn.commit()
    conn.close()
    print(f"SF1 Geo data has been ingested for {state_abbr}")

def main():
    input_dir = Path("/data/states")
    output_dir = Path("/data/sqlite_dbs")
    output_dir.mkdir(parents=True, exist_ok=True)
    
    for file in input_dir.glob("*geo2010.sf1"):
        process_geo_file(file, output_dir)

if __name__ == "__main__":
    main()
