import zipfile
import os
import psycopg2

def extract_zip_and_get_shapefile(zip_path, extract_to_folder):
    def extract_zip_recursive(zip_path, extract_to_folder):
        with zipfile.ZipFile(zip_path, 'r') as zip_ref:
            zip_ref.extractall(extract_to_folder)

        for root, dirs, files in os.walk(extract_to_folder):
            for file in files:
                file_path = os.path.join(root, file)
                if file.endswith(".shp"):
                    shape_file_info.append((file, file_path, 'SHAPE', os.path.getsize(file_path)))
                elif file.endswith(".zip"):
                    nested_zip_path = file_path
                    nested_extract_folder = os.path.join(root, os.path.splitext(file)[0])
                    if not os.path.exists(nested_extract_folder):
                        os.makedirs(nested_extract_folder)
                    extract_zip_recursive(nested_zip_path, nested_extract_folder)

    shape_file_info = []
    extract_zip_recursive(zip_path, extract_to_folder)
    return shape_file_info

def save_file_info_to_db(file_info, db_params):
    conn = psycopg2.connect(**db_params)
    cursor = conn.cursor()

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS file_info (
            id SERIAL PRIMARY KEY,
            file_name TEXT,
            file_path TEXT,
            file_type TEXT,
            file_size BIGINT
        );
    ''')

    for file_name, file_path, file_type, file_size in file_info:
        cursor.execute('''
            INSERT INTO file_info (file_name, file_path, file_type, file_size)
            VALUES (%s, %s, %s, %s)
        ''', (file_name, file_path, file_type, file_size))

    conn.commit()
    cursor.close()
    conn.close()

def process_folder(folder_path, output_folder, db_params):
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    for file in os.listdir(folder_path):
        if file.endswith('.zip'):
            zip_file_path = os.path.join(folder_path, file)
            extract_folder_name = os.path.splitext(file)[0]
            extract_folder_path = os.path.join(output_folder, extract_folder_name)

            if not os.path.exists(extract_folder_path):
                os.makedirs(extract_folder_path)

            shape_file_info = extract_zip_and_get_shapefile(zip_file_path, extract_folder_path)

            if shape_file_info:
                save_file_info_to_db(shape_file_info, db_params)
                print(f"File info saved to database for {file}.")
            else:
                print(f"No SHAPE file found in the ZIP archive: {zip_file_path}")

# Database connection parameters
db_params = {
    'dbname': 'your_dbname',
    'user': 'your_username',
    'password': 'your_password',
    'host': 'your_host'
}

# Example usage
folder_to_scan = 'path_to_folder_containing_zip_files'  # Replace with your folder path
output_folder = 'path_to_output_folder'                 # Replace with your output folder path
process_folder(folder_to_scan, output_folder, db_params)
