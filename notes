def generate_visualizations(report, df1, df2):
    visualizations = {}

    # 1. Simple Venn diagram-like visualization of column overlap
    plt.figure(figsize=(10, 6))
    
    # Create two circles
    circle1 = plt.Circle((0.3, 0.5), 0.3, fill=False)
    circle2 = plt.Circle((0.7, 0.5), 0.3, fill=False)
    
    fig, ax = plt.subplots()
    ax.set_xlim(0, 1)
    ax.set_ylim(0, 1)
    ax.add_artist(circle1)
    ax.add_artist(circle2)
    
    # Add labels
    plt.text(0.2, 0.5, f"{report['table1']}\n{len(report['only_in_table1'])}", ha='center', va='center')
    plt.text(0.8, 0.5, f"{report['table2']}\n{len(report['only_in_table2'])}", ha='center', va='center')
    plt.text(0.5, 0.5, f"Common\n{len(report['common_columns'])}", ha='center', va='center')
    
    plt.title("Column Overlap Between Tables")
    ax.set_aspect('equal')
    ax.axis('off')
    visualizations["column_overlap"] = fig_to_base64(fig)
    plt.close(fig)

    # 2. Bar chart of data types
    data_types1 = df1.dtypes
    data_types2 = df2.dtypes
    dt_df1 = pd.DataFrame(data_types1, columns=["column", "type"])
    dt_df2 = pd.DataFrame(data_types2, columns=["column", "type"])
    
    plt.figure(figsize=(12, 6))
    sns.countplot(data=dt_df1, x="type", label=report["table1"])
    sns.countplot(data=dt_df2, x="type", label=report["table2"])
    plt.title("Data Type Distribution")
    plt.legend()
    visualizations["data_type_distribution"] = fig_to_base64(plt.gcf())
    plt.close()

    # 3. Heatmap of data quality
    quality_df1 = pd.DataFrame(report["data_quality"]["table1"]).T
    quality_df2 = pd.DataFrame(report["data_quality"]["table2"]).T
    
    plt.figure(figsize=(15, 10))
    sns.heatmap(quality_df1[["null_percentage", "unique_percentage"]], annot=True, cmap="YlGnBu")
    plt.title(f"Data Quality Heatmap - {report['table1']}")
    visualizations["data_quality_heatmap_1"] = fig_to_base64(plt.gcf())
    plt.close()
    
    plt.figure(figsize=(15, 10))
    sns.heatmap(quality_df2[["null_percentage", "unique_percentage"]], annot=True, cmap="YlGnBu")
    plt.title(f"Data Quality Heatmap - {report['table2']}")
    visualizations["data_quality_heatmap_2"] = fig_to_base64(plt.gcf())
    plt.close()

    # 4. Bar plot of column importance
    importance_df1 = pd.DataFrame(report["column_importance"]["table1"], columns=["column", "importance"])
    importance_df2 = pd.DataFrame(report["column_importance"]["table2"], columns=["column", "importance"])
    
    plt.figure(figsize=(12, 6))
    sns.barplot(data=importance_df1.sort_values("importance", ascending=False).head(10), x="column", y="importance")
    plt.title(f"Top 10 Important Columns - {report['table1']}")
    plt.xticks(rotation=45, ha='right')
    visualizations["column_importance_1"] = fig_to_base64(plt.gcf())
    plt.close()
    
    plt.figure(figsize=(12, 6))
    sns.barplot(data=importance_df2.sort_values("importance", ascending=False).head(10), x="column", y="importance")
    plt.title(f"Top 10 Important Columns - {report['table2']}")
    plt.xticks(rotation=45, ha='right')
    visualizations["column_importance_2"] = fig_to_base64(plt.gcf())
    plt.close()

    return visualizations
