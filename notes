import sqlite3
import csv
import os
import glob

def create_connection():
    conn = sqlite3.connect('dc_census_sf1.db')
    return conn

def create_table(conn):
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS dc_census_data (
        file_id INTEGER,
        year INTEGER,
        sftype TEXT,
        state TEXT,
        col1 TEXT,
        segment TEXT,
        logrecno TEXT,
        tbl TEXT,
        stat REAL
    )
    ''')
    conn.commit()

def process_sf1_file(file_path, conn):
    with open(file_path, 'r') as file:
        reader = csv.reader(file)
        cursor = conn.cursor()
        
        for row in reader:
            if len(row) < 6:
                print(f"Skipping row with insufficient data: {row}")
                continue

            sftype = row[0]
            state = 'DC'  # Assuming we're focusing on DC
            
            # Store these as text to avoid conversion issues
            col1 = row[3] if len(row) > 3 else ''
            segment = row[4] if len(row) > 4 else ''
            logrecno = row[5] if len(row) > 5 else ''
            
            file_id = int(os.path.basename(file_path).split('.')[0])  # Using filename as file_id
            year = 2010  # Assuming 2010 Census, change if different
            
            # Process the data columns (assuming they start from index 6)
            for i, value in enumerate(row[6:], start=1):
                tbl = f'SF1_{i:04d}'  # Creating a table name for each column
                try:
                    stat = float(value) if value.strip() else None
                except ValueError:
                    print(f"Invalid numeric value in file {file_path}, row {reader.line_num}, column {i+6}: {value}")
                    stat = None

                cursor.execute('''
                INSERT INTO dc_census_data 
                (file_id, year, sftype, state, col1, segment, logrecno, tbl, stat)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (file_id, year, sftype, state, col1, segment, logrecno, tbl, stat))
        
        conn.commit()

def main():
    conn = create_connection()
    create_table(conn)
    
    data_directory = 'dc_sf1_data'
    
    for file_path in glob.glob(os.path.join(data_directory, '*.sf1')):
        print(f"Processing file: {file_path}")
        process_sf1_file(file_path, conn)
    
    conn.close()
    print("Data processing complete.")

if __name__ == "__main__":
    main()
