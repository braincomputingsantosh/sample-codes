from pyspark.sql import SparkSession
import logging

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def ingest_data(source_table, target_table, truncate='no'):
    """
    Ingest data from source table to target table.
    
    :param source_table: Name of the source table
    :param target_table: Name of the target table
    :param truncate: 'yes' to overwrite target table, 'no' to append (default: 'no')
    """
    logger.info(f"Starting ingestion process from {source_table} to {target_table}")
    
    try:
        # Create SparkSession
        spark = SparkSession.builder.appName("IngestData").getOrCreate()
        logger.info("SparkSession created successfully")

        # Read source table
        df = spark.table(source_table)
        logger.info(f"Source table '{source_table}' read successfully")

        # Write to target table
        if truncate.lower() == 'yes':
            logger.info(f"Overwriting target table '{target_table}'")
            df.write.mode("overwrite").saveAsTable(target_table)
        else:
            logger.info(f"Appending to target table '{target_table}'")
            df.write.mode("append").saveAsTable(target_table)

        logger.info(f"Data ingestion complete. Data from {source_table} has been written to {target_table}")
        
        # Log some statistics
        row_count = df.count()
        logger.info(f"Number of rows ingested: {row_count}")

        return True, f"Successfully ingested {row_count} rows from {source_table} to {target_table}"

    except Exception as e:
        error_message = f"An error occurred during ingestion: {str(e)}"
        logger.error(error_message, exc_info=True)
        return False, error_message

# Example usage
if __name__ == "__main__":
    # You would typically get these values from your Databricks job parameters
    # or from another configuration source
    source_table = "your_source_table_name"
    target_table = "your_target_table_name"
    truncate = "no"  # or "yes" if you want to overwrite the target table

    success, message = ingest_data(source_table, target_table, truncate)
    
    if success:
        print("Ingestion process completed successfully!")
        print(message)
    else:
        print("Ingestion process failed.")
        print(message)
