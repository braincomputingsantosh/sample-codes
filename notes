import psycopg2
import pandas as pd
import matplotlib.pyplot as plt
import os

# Connect to PostgreSQL
conn = psycopg2.connect(
    dbname="your_database",
    user="your_user",
    password="your_password",
    host="your_host",
    port="your_port"
)

# Function to execute a query and return the results as a DataFrame
def execute_query(query, columns):
    with conn.cursor() as cursor:
        cursor.execute(query)
        results = cursor.fetchall()
        return pd.DataFrame(results, columns=columns)

# Collect data from various statistics views
db_stats_df = execute_query("SELECT * FROM pg_stat_database WHERE datname = 'your_database';", ['datid', 'datname', 'numbackends', 'xact_commit', 'xact_rollback', 'blks_read', 'blks_hit', 'tup_returned', 'tup_fetched', 'tup_inserted', 'tup_updated', 'tup_deleted', 'conflicts', 'temp_files', 'temp_bytes', 'deadlocks', 'blk_read_time', 'blk_write_time', 'stats_reset'])
table_stats_df = execute_query("SELECT relname, seq_scan, idx_scan, n_tup_ins, n_tup_upd, n_tup_del FROM pg_stat_user_tables;", ['relname', 'seq_scan', 'idx_scan', 'n_tup_ins', 'n_tup_upd', 'n_tup_del'])
lock_stats_df = execute_query("SELECT * FROM pg_locks;", ['locktype', 'database', 'relation', 'page', 'tuple', 'virtualxid', 'transactionid', 'classid', 'objid', 'objsubid', 'virtualtransaction', 'pid', 'mode', 'granted', 'fastpath'])
node_stats_df = execute_query("SELECT nodeid, nodename, nodeport, noderole, isactive FROM pg_dist_node;", ['nodeid', 'nodename', 'nodeport', 'noderole', 'isactive'])
shard_stats_df = execute_query("SELECT shardid, shardstorage, min_value, max_value, num_nodes FROM pg_dist_shard;", ['shardid', 'shardstorage', 'min_value', 'max_value', 'num_nodes'])

# Generate visualizations for collected data
# Example: Visualizing table scan statistics
plt.figure(figsize=(10, 6))
plt.bar(table_stats_df['relname'], table_stats_df['seq_scan'], label='Sequential Scans')
plt.bar(table_stats_df['relname'], table_stats_df['idx_scan'], bottom=table_stats_df['seq_scan'], label='Index Scans')
plt.xlabel('Table Name')
plt.ylabel('Scan Count')
plt.title('Sequential vs. Index Scans per Table')
plt.xticks(rotation=90)
plt.legend()
plt.tight_layout()
plt.savefig('table_scan_statistics.png')
plt.close()

# Generate the HTML report
def generate_html_report():
    report_content = f"""
    <html>
    <head>
        <title>Database Profile Report</title>
        <style>
            body {{ font-family: Arial, sans-serif; }}
            table {{ border-collapse: collapse; width: 100%; }}
            th, td {{ border: 1px solid #ddd; padding: 8px; }}
            th {{ background-color: #f2f2f2; }}
        </style>
    </head>
    <body>
        <h1>Database Profile Report</h1>
        
        <h2>Database Statistics</h2>
        {db_stats_df.to_html(index=False)}
        
        <h2>Table Scan Statistics</h2>
        <img src="table_scan_statistics.png" alt="Table Scan Statistics">
        
        <h2>Table Statistics</h2>
        {table_stats_df.to_html(index=False)}
        
        <h2>Lock Statistics</h2>
        {lock_stats_df.to_html(index=False)}
        
        <h2>Node Statistics</h2>
        {node_stats_df.to_html(index=False)}
        
        <h2>Shard Statistics</h2>
        {shard_stats_df.to_html(index=False)}
    </body>
    </html>
    """
    with open("database_profile_report.html", "w") as file:
        file.write(report_content)

generate_html_report()

# Open the HTML report in the default web browser
os.system("open database_profile_report.html" if os.name == "posix" else "start database_profile_report.html")
