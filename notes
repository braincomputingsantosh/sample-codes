DO $$
DECLARE
    state_rec record;
    last_processed_id bigint;
    rows_updated int;
    error_count int;
    batch_size int := 100000; -- You can adjust this value
BEGIN
    FOR state_rec IN (SELECT DISTINCT state FROM census.sf1_temp ORDER BY state)
    LOOP
        RAISE NOTICE 'Processing state: %', state_rec.state;
        
        last_processed_id := 0;
        error_count := 0;
        
        LOOP
            BEGIN
                WITH indexed_dd AS (
                    SELECT 
                        segment, 
                        tbl, 
                        field_code,
                        ROW_NUMBER() OVER (PARTITION BY segment, tbl ORDER BY sort_id) - 1 AS index_position
                    FROM census.dd_seq_dhc
                    WHERE field_code IS NOT NULL
                ),
                to_update AS (
                    SELECT sf1.id
                    FROM census.sf1_temp sf1
                    WHERE sf1.state = state_rec.state
                      AND sf1.id > last_processed_id
                    ORDER BY sf1.id
                    LIMIT batch_size
                )
                UPDATE census.sf1_temp sf1
                SET tbl = dd.field_code
                FROM indexed_dd dd, to_update
                WHERE sf1.id = to_update.id
                  AND sf1.segment::text = dd.segment::text
                  AND UPPER(SPLIT_PART(sf1.tbl, '-', 1)) = UPPER(dd.tbl)
                  AND CAST(SPLIT_PART(sf1.tbl, '-', 2) AS INTEGER) = dd.index_position
                RETURNING sf1.id INTO last_processed_id;

                GET DIAGNOSTICS rows_updated = ROW_COUNT;
                
                RAISE NOTICE 'Processed batch for state % - % rows updated', state_rec.state, rows_updated;

            EXCEPTION WHEN OTHERS THEN
                -- Handle the error, but don't rollback
                RAISE WARNING 'Error in batch for state %: % %', state_rec.state, SQLERRM, SQLSTATE;
                error_count := error_count + 1;
                -- Move to the next batch even if this one failed
                last_processed_id := last_processed_id + batch_size;
                -- If too many errors occur, exit the loop
                IF error_count > 10 THEN
                    RAISE EXCEPTION 'Too many errors occurred while processing state %', state_rec.state;
                END IF;
            END;
            
            EXIT WHEN rows_updated = 0 OR last_processed_id IS NULL;
            
            PERFORM pg_sleep(0.1);  -- 100 milliseconds delay
        END LOOP;

        RAISE NOTICE 'Completed processing state: %', state_rec.state;
    END LOOP;
END $$;
