# File: date_helper.py

from pyspark.sql.functions import to_date, date_format, current_date, datediff, months_between, year, month, dayofmonth, col
from pyspark.sql.types import DateType, TimestampType

class DateHelper:
    @staticmethod
    def string_to_date(df, column, format='yyyy-MM-dd'):
        return df.withColumn(column, to_date(df[column], format))
    
    @staticmethod
    def date_to_string(df, column, format='yyyy-MM-dd'):
        return df.withColumn(column, date_format(df[column], format))
    
    @staticmethod
    def add_current_date(df, new_column_name='current_date'):
        return df.withColumn(new_column_name, current_date())
    
    @staticmethod
    def calculate_days_difference(df, start_date_col, end_date_col, new_column_name='days_difference'):
        return df.withColumn(new_column_name, datediff(df[end_date_col], df[start_date_col]))
    
    @staticmethod
    def calculate_months_difference(df, start_date_col, end_date_col, new_column_name='months_difference'):
        return df.withColumn(new_column_name, months_between(df[end_date_col], df[start_date_col]))
    
    @staticmethod
    def extract_year(df, date_column, new_column_name='year'):
        return df.withColumn(new_column_name, year(df[date_column]))
    
    @staticmethod
    def extract_month(df, date_column, new_column_name='month'):
        return df.withColumn(new_column_name, month(df[date_column]))
    
    @staticmethod
    def extract_day(df, date_column, new_column_name='day'):
        return df.withColumn(new_column_name, dayofmonth(df[date_column]))

    @staticmethod
    def cast_to_date(df, column):
        return df.withColumn(column, col(column).cast(DateType()))

    @staticmethod
    def cast_to_timestamp(df, column):
        return df.withColumn(column, col(column).cast(TimestampType()))
