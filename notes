# ... (previous imports and configurations remain the same)

def process_table(spark, raw_table_name, silver_table_name, metadata_table_name, raw_database, silver_database):
    """
    Main processing function
    """
    try:
        # Validate tables exist
        for db, table in [(raw_database, raw_table_name), (silver_database, silver_table_name)]:
            if not validate_table_exists(db, table):
                raise Exception(f"Table {db}.{table} does not exist")
        
        # Execute EXCEPT query to find delta records
        log_message("Executing EXCEPT query to find delta records...")
        diff_df = spark.sql(f"""
        SELECT DISTINCT mcdash_loan_identifier, as_of_month 
        FROM {raw_database}.{raw_table_name}
        EXCEPT
        SELECT DISTINCT mcdash_loan_identifier, as_of_month 
        FROM {silver_database}.{silver_table_name}
        """)
        
        # Get unique as_of_month values from the delta
        as_of_months_df = diff_df.select("as_of_month").distinct()
        as_of_months = [row.as_of_month for row in as_of_months_df.collect()]
        
        total_months = len(as_of_months)
        log_message(f"Found {total_months} distinct as_of_month values to process")
        
        # If no records to process, return success
        if total_months == 0:
            log_message("No new records to process. All data is up to date.")
            return []
        
        results = []
        for as_of_month in as_of_months:
            try:
                result = append_and_update_metadata(
                    spark, raw_table_name, silver_table_name,
                    metadata_table_name, raw_database, silver_database, as_of_month
                )
                results.append((as_of_month, result))
            except Exception as e:
                log_message(f"Error processing as_of_month {as_of_month}: {str(e)}")
                results.append((as_of_month, "FAILED"))
        
        return results
    
    except Exception as e:
        if str(e) == "SUCCESS":
            log_message("Process completed successfully with no new records to process")
            return []
        else:
            log_message(f"Error in process_table: {str(e)}")
            log_message(traceback.format_exc())
            raise  # Re-raise the exception if it's not a "SUCCESS" message

# Main execution
try:
    log_message(f"""
    Starting HELOC processing job with parameters:
    Raw Table: {raw_database}.{raw_table_name}
    Silver Table: {silver_database}.{silver_table_name}
    Metadata Table: {metadata_table_name}
    """)
    
    processing_results = process_table(
        spark, 
        raw_table_name, 
        silver_table_name, 
        metadata_table_name,
        raw_database,
        silver_database
    )
    
    # Create a summary DataFrame of results
    summary_data = [(as_of_month, result) for (as_of_month, result) in processing_results]
    
    if summary_data:
        summary_schema = StructType([
            StructField("As of Month", StringType(), True),
            StructField("Processing Result", StringType(), True)
        ])
        
        summary_df = spark.createDataFrame(summary_data, schema=summary_schema)
        log_message("Processing Summary:")
        display(summary_df)
        
        # Check if any failures occurred
        failures = [result for _, result in processing_results if result == "FAILED"]
        if failures:
            log_message("Some records failed to process")
            dbutils.notebook.exit("FAILED")
        
        # Display final counts
        spark.sql(f"""
        SELECT 
            'Final Count Summary' as description,
            (SELECT COUNT(*) FROM {raw_database}.{raw_table_name}) as source_count,
            (SELECT COUNT(*) FROM {silver_database}.{silver_table_name}) as target_count
        """).display()
        
    else:
        log_message("No records required processing - data is up to date")
    
    # Return success status
    dbutils.notebook.exit("SUCCESS")
    
except Exception as e:
    if str(e) == "SUCCESS":
        log_message("Process completed successfully with no new records to process")
        dbutils.notebook.exit("SUCCESS")
    else:
        log_message(f"Fatal error in main execution: {str(e)}")
        log_message(traceback.format_exc())
        dbutils.notebook.exit("FAILED")
