import sqlite3
import csv
import os
import glob
import re

def create_connection():
    conn = sqlite3.connect('dc_census_sf1.db')
    return conn

def create_table(conn):
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS dc_census_data (
        file_id INTEGER,
        year INTEGER,
        sftype TEXT,
        state TEXT,
        col1 INTEGER,
        segment INTEGER,
        logrecno INTEGER,
        tbl TEXT,
        stat REAL
    )
    ''')
    conn.commit()

def parse_logrecno(value):
    # Extract state, logrecno, and year from the string
    match = re.match(r'([a-z]{2})(\d{5})(\d{4})', value.lower())
    if match:
        state, logrecno, year = match.groups()
        return state, int(logrecno), int(year)
    return None, None, None

def process_sf1_file(file_path, conn):
    with open(file_path, 'r') as file:
        reader = csv.reader(file)
        cursor = conn.cursor()
        
        for row in reader:
            if len(row) < 6:
                print(f"Skipping row with insufficient data: {row}")
                continue

            sftype = row[0]
            state, logrecno, year = parse_logrecno(row[5])
            
            if state is None or logrecno is None or year is None:
                print(f"Unable to parse logrecno in row: {row}")
                continue

            try:
                col1 = int(row[3]) if len(row) > 3 else 0
                segment = int(row[4]) if len(row) > 4 else 0
            except ValueError as e:
                print(f"Error converting data in file {file_path}, row {reader.line_num}: {e}")
                continue

            file_id = int(os.path.basename(file_path).split('.')[0])  # Using filename as file_id
            
            # Process the data columns (starting from index 6)
            for i, value in enumerate(row[6:], start=1):
                tbl = f'SF1_{i:04d}'  # Creating a table name for each column
                try:
                    stat = float(value) if value.strip() else None
                except ValueError:
                    print(f"Invalid numeric value in file {file_path}, row {reader.line_num}, column {i+6}: {value}")
                    stat = None

                cursor.execute('''
                INSERT INTO dc_census_data 
                (file_id, year, sftype, state, col1, segment, logrecno, tbl, stat)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (file_id, year, sftype, state, col1, segment, logrecno, tbl, stat))
        
        conn.commit()

def main():
    conn = create_connection()
    create_table(conn)
    
    data_directory = 'dc_sf1_data'
    
    for file_path in glob.glob(os.path.join(data_directory, '*.sf1')):
        print(f"Processing file: {file_path}")
        process_sf1_file(file_path, conn)
    
    conn.close()
    print("Data processing complete.")

if __name__ == "__main__":
    main()
