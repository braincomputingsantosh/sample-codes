from pyspark.sql import SparkSession
import logging
import time
import threading
import json

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Create widgets for user input
dbutils.widgets.removeAll()
dbutils.widgets.text("source_table", "", "Source Table")
dbutils.widgets.text("target_table", "", "Target Table")
dbutils.widgets.dropdown("truncate", "no", ["yes", "no"], "Truncate Target Table")
dbutils.widgets.text("elapsed_time", "", "Elapsed Time (seconds)")
dbutils.widgets.text("confirmation", "", "Confirmation")

# Function to get all widget values
def get_widget_values():
    return {
        "source_table": dbutils.widgets.get("source_table"),
        "target_table": dbutils.widgets.get("target_table"),
        "truncate": dbutils.widgets.get("truncate"),
        "elapsed_time": dbutils.widgets.get("elapsed_time"),
        "confirmation": dbutils.widgets.get("confirmation")
    }

# HTML template
html_template = """
<div id="ingestionUI">
    <h3>Ingestion Process</h3>
    <b>Source Table:</b> <span id="sourceTable"></span><br>
    <b>Target Table:</b> <span id="targetTable"></span><br>
    <b>Truncate:</b> <span id="truncate"></span><br>
    <b>Elapsed Time:</b> <span id="elapsedTime"></span> seconds
    <br><br>
    <div id="confirmationDiv" style="display:none;">
        <p style="color: red;">Warning: You've chosen to truncate the target table. This will delete all existing data in the table.</p>
        <p>Are you sure you want to proceed?</p>
        <button onclick="confirmTruncate(true)">Yes, proceed with truncation</button>
        <button onclick="confirmTruncate(false)">No, cancel operation</button>
    </div>
    <div id="startButtonDiv">
        <button onclick="startIngestion()">Start Ingestion</button>
    </div>
</div>

<script>
var widgetValues = {widget_values};

function updateUI() {{
    document.getElementById('sourceTable').textContent = widgetValues.source_table;
    document.getElementById('targetTable').textContent = widgetValues.target_table;
    document.getElementById('truncate').textContent = widgetValues.truncate;
    document.getElementById('elapsedTime').textContent = widgetValues.elapsed_time;
}}

function startIngestion() {{
    if (widgetValues.truncate === "yes") {{
        document.getElementById("confirmationDiv").style.display = "block";
        document.getElementById("startButtonDiv").style.display = "none";
    }} else {{
        confirmTruncate(true);
    }}
}}

function confirmTruncate(confirmed) {{
    if (confirmed) {{
        document.getElementById("confirmationDiv").style.display = "none";
        document.getElementById("startButtonDiv").style.display = "none";
        widgetValues.confirmation = "confirmed";
    }} else {{
        document.getElementById("confirmationDiv").style.display = "none";
        document.getElementById("startButtonDiv").style.display = "block";
        widgetValues.confirmation = "cancelled";
    }}
    // Use Databricks-specific method to update widget
    dbutils.widgets.text("confirmation", widgetValues.confirmation);
}}

updateUI();

// Set up interval to update UI every second
setInterval(function() {{
    fetch('/api/2.0/workspace/runner/run', {{
        method: 'POST',
        headers: {{ 'Content-Type': 'application/json' }},
        body: JSON.stringify({{
            commandString: 'print(json.dumps(get_widget_values()))',
            language: 'python',
            clusterId: clusterId
        }})
    }})
    .then(response => response.json())
    .then(data => {{
        if (data.results && data.results.resultType === 'text') {{
            widgetValues = JSON.parse(data.results.data);
            updateUI();
        }}
    }});
}}, 1000);
</script>
"""

# Get the current cluster ID
clusterId = spark.conf.get("spark.databricks.clusterUsageTags.clusterId")

# Display the HTML
displayHTML(html_template.format(widget_values=json.dumps(get_widget_values())))

# ... (rest of the Python code remains the same)
