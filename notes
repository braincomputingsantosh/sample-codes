from pyspark.sql.functions import current_timestamp, col, lit, regexp_extract, expr
from pyspark.sql.types import StringType
import traceback

def update_source_metadata(tables_to_append, append_results, target_year, target_month):
    try:
        all_updated_metadata = []

        for table in tables_to_append:
            print(f"Processing metadata for table: {table}")
            
            # Construct the source metadata table name
            source_metadata_table = f"{source_schema_name}.{table}.source_metadata"
            
            # Read source metadata
            source_metadata_df = spark.table(source_metadata_table)
            
            # Extract year and month from file_path in the source_metadata column
            source_metadata_df = source_metadata_df.withColumn(
                "file_path", expr("source_metadata.file_path")
            ).withColumn(
                "extracted_year", regexp_extract(col("file_path"), r"/(\d{4})/", 1)
            ).withColumn(
                "extracted_month", regexp_extract(col("file_path"), r"/(\d{4})/(\d{2})/", 2)
            )
            
            # Filter rows based on year/month
            filtered_metadata = source_metadata_df.filter(
                (col("extracted_year") == target_year) &
                (col("extracted_month") == target_month)
            )
            
            if filtered_metadata.count() == 0:
                print(f"No metadata found for table {table} in year {target_year}, month {target_month}")
                continue
            
            # Get the process state for this table
            table_status = dict(append_results).get(table, "UNKNOWN")
            
            # Add new columns and transform existing ones
            updated_metadata = filtered_metadata.select(
                col("id"),
                lit("bk_mpo").alias("project_name"),
                col("source_metadata.file_name").alias("file_name"),
                col("file_path"),
                current_timestamp().alias("process_date"),
                regexp_extract(col("source_metadata.file_name"), r"\.(\w+)$", 1).alias("file_type"),
                lit(table_status).alias("file_process_state"),
                current_timestamp().alias("process_start_dtm"),
                current_timestamp().alias("process_end_dtm"),
                col("source_metadata.file_size").alias("file_size")
            )
            
            all_updated_metadata.append(updated_metadata)
        
        # Combine all updated metadata
        if not all_updated_metadata:
            print("No metadata found for any tables")
            return
        
        combined_metadata = all_updated_metadata[0]
        for df in all_updated_metadata[1:]:
            combined_metadata = combined_metadata.union(df)
        
        # Define the target table
        target_table_path = f"{target_metadata_schema}.{target_metadata_table}"
        
        # Append the updated metadata to the target table
        combined_metadata.write.mode("append").saveAsTable(target_table_path)
        
        # Log processing results
        print(f"Metadata updated in {target_table_path}")
        print(f"Total number of records processed: {combined_metadata.count()}")
        
        # Log status for each table
        for table, status in append_results:
            print(f"Table {table}: {status}")
        
    except Exception as e:
        error_message = f"Error updating metadata: {str(e)}\n{traceback.format_exc()}"
        print(error_message)
        raise

# Example usage in main execution
target_year = "2024"
target_month = "04"  # Assuming you want to process April 2024

tables_to_append = ['heloc', 'loan_month', 'loan_month_last_mit']  # Add your table names here
append_results = []
overall_status = "SUCCESS"

# Perform append operation for each table in the list
for table in tables_to_append:
    try:
        # Your append logic here
        status = "PROCESSED"  # Replace with actual append logic result
        append_results.append((table, status))
    except Exception as e:
        print(f"Failed to process table {table}: {str(e)}")
        append_results.append((table, "FAILED"))
        overall_status = "PARTIAL_FAILURE"

# Update source metadata
try:
    update_source_metadata(tables_to_append, append_results, target_year, target_month)
    print("Metadata update completed successfully.")
except Exception as e:
    print(f"Failed to update source metadata: {str(e)}")
    overall_status = "FAILURE"

print(f"All operations completed. Overall status: {overall_status}")
dbutils.notebook.exit(overall_status)
