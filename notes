from pyspark.sql import SparkSession
from pyspark.sql.functions import *

# Create input widgets
dbutils.widgets.text("source_schema", "bk_mpo_raw", "Source Schema")
dbutils.widgets.text("source_table", "loan_month_loss_mit", "Source Table")
dbutils.widgets.text("target_schema", "test_bk_mpo", "Target Schema")
dbutils.widgets.text("target_table", "loan_month_loss_mit", "Target Table")
dbutils.widgets.text("num_rows", "2000", "Number of Rows")
dbutils.widgets.text("where_clause", "", "WHERE Clause (Optional)")

def migrate_data(source_schema, source_table, target_schema, target_table, num_rows, where_clause):
    spark = SparkSession.builder.appName("DataMigration").getOrCreate()

    # Set the database
    spark.sql(f"USE {source_schema}")

    # Read the source table
    df = spark.table(f"{source_schema}.{source_table}")

    # Apply WHERE clause if provided
    if where_clause:
        # Use spark.sql to execute the complex WHERE clause
        filtered_df = spark.sql(f"""
            SELECT * FROM {source_schema}.{source_table}
            WHERE {where_clause}
        """)
        
        # Sample the specified number of rows from the filtered DataFrame
        sampled_df = filtered_df.limit(num_rows)
    else:
        # If no WHERE clause, sample directly from the original DataFrame
        sampled_df = df.limit(num_rows)

    # Create the target schema if it doesn't exist
    spark.sql(f"CREATE SCHEMA IF NOT EXISTS {target_schema}")

    # Create the target table with the same schema as the source table
    sampled_df.write.mode("overwrite").saveAsTable(f"{target_schema}.{target_table}")

    print(f"Successfully migrated {num_rows} rows from {source_schema}.{source_table} to {target_schema}.{target_table}")
    if where_clause:
        print(f"Applied WHERE clause: {where_clause}")

# Get parameters from widgets
source_schema = dbutils.widgets.get("source_schema")
source_table = dbutils.widgets.get("source_table")
target_schema = dbutils.widgets.get("target_schema")
target_table = dbutils.widgets.get("target_table")
num_rows = int(dbutils.widgets.get("num_rows"))
where_clause = dbutils.widgets.get("where_clause")

# Call the function
migrate_data(source_schema, source_table, target_schema, target_table, num_rows, where_clause)
