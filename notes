import sqlite3
import folium
from shapely.wkb import loads
from folium.vector_layers import Polygon

# Connect to the SQLite database
conn = sqlite3.connect('your_database.db')  # Replace 'your_database.db' with your database file
cursor = conn.cursor()

# Query to select the WKB MultiPolygon data from your table
# Replace 'your_table' with your table name and 'wkb_column' with the name of the column containing the WKB data
query = "SELECT wkb_column FROM your_table"
cursor.execute(query)

# Fetch one record (or use fetchall() if you expect multiple geometries)
record = cursor.fetchone()

# Assuming record contains WKB data, convert it from binary to a Shapely geometry object
wkb_data = record[0]
geometry = loads(bytes(wkb_data))

# Close the database connection
conn.close()

# Check if the geometry is a MultiPolygon and display it using Folium
if geometry.geom_type == 'MultiPolygon':
    # Initialize a Folium map. You might want to adjust the location and zoom_start parameters.
    m = folium.Map(location=[geometry.centroid.y, geometry.centroid.x], zoom_start=12)
    
    # Folium requires coordinates in a nested list format for MultiPolygons
    # Convert each Polygon in the MultiPolygon to a list of exterior coordinates
    for polygon in geometry:
        # Extract the exterior coordinates of the polygon
        exterior_coords = list(polygon.exterior.coords)
        # Add the polygon to the map
        folium.Polygon(locations=exterior_coords, color='blue', fill=True, fill_color='cyan').add_to(m)
    
    # Display the map
    display(m)  # If running in Jupyter Notebook/Lab, or use `m.save('map.html')` to save the map to an HTML file and view it in a browser
else:
    print("The geometry is not a MultiPolygon.")
