import sqlite3
import csv
import os
import glob

# Database setup
def create_connection():
    conn = sqlite3.connect('dc_census_sf1.db')
    return conn

def create_table(conn):
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS dc_census_data (
        file_id INTEGER,
        year INTEGER,
        sftype TEXT,
        state TEXT,
        col1 INTEGER,
        segment INTEGER,
        logrecno INTEGER,
        tbl TEXT,
        stat REAL
    )
    ''')
    conn.commit()

# Data processing
def process_sf1_file(file_path, conn, file_id):
    with open(file_path, 'r') as file:
        reader = csv.reader(file)
        cursor = conn.cursor()
        
        for row in reader:
            # Assuming the SF1 file structure. Adjust indices if needed.
            sftype = row[0]
            state = 'DC'  # Since we're focusing on DC
            col1 = int(row[3])
            segment = int(row[4])
            logrecno = int(row[5])
            
            year = 2010  # Assuming 2010 Census, change if different
            
            # Process the data columns (assuming they start from index 6)
            for i, value in enumerate(row[6:], start=1):
                tbl = f'SF1_{i:04d}'  # Creating a table name for each column
                stat = float(value) if value.strip() else None
                
                cursor.execute('''
                INSERT INTO dc_census_data 
                (file_id, year, sftype, state, col1, segment, logrecno, tbl, stat)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (file_id, year, sftype, state, col1, segment, logrecno, tbl, stat))
        
        conn.commit()

def main():
    conn = create_connection()
    create_table(conn)
    
    # Assuming SF1 files are in a directory named 'dc_sf1_data'
    data_directory = 'dc_sf1_data'
    
    file_id = 62541  # Starting file_id
    
    for file_path in glob.glob(os.path.join(data_directory, '*.sf1')):
        print(f"Processing file: {file_path}")
        process_sf1_file(file_path, conn, file_id)
        file_id += 1  # Increment file_id for the next file
    
    conn.close()
    print("Data processing complete.")

if __name__ == "__main__":
    main()
