from pyspark.sql import SparkSession
import logging
import time

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Create widgets for user input
dbutils.widgets.text("source_table", "", "Source Table")
dbutils.widgets.text("target_table", "", "Target Table")
dbutils.widgets.dropdown("truncate", "no", ["yes", "no"], "Truncate Target Table")

def ingest_data(source_table, target_table, truncate='no'):
    logger.info(f"Starting ingestion process from {source_table} to {target_table}")
    start_time = time.time()
    
    try:
        # Create SparkSession
        spark = SparkSession.builder.appName("IngestData").getOrCreate()
        logger.info("SparkSession created successfully")

        # Read source table
        df = spark.table(source_table)
        logger.info(f"Source table '{source_table}' read successfully")

        # Write to target table
        if truncate.lower() == 'yes':
            logger.info(f"Overwriting target table '{target_table}'")
            df.write.mode("overwrite").saveAsTable(target_table)
        else:
            logger.info(f"Appending to target table '{target_table}'")
            df.write.mode("append").saveAsTable(target_table)

        # Log some statistics
        row_count = df.count()
        end_time = time.time()
        duration = end_time - start_time
        
        logger.info(f"Data ingestion complete. {row_count} rows from {source_table} have been written to {target_table}")
        logger.info(f"Ingestion process took {duration:.2f} seconds")

        return True, f"Successfully ingested {row_count} rows in {duration:.2f} seconds"

    except Exception as e:
        end_time = time.time()
        duration = end_time - start_time
        error_message = f"An error occurred during ingestion after {duration:.2f} seconds: {str(e)}"
        logger.error(error_message, exc_info=True)
        return False, error_message

# Main execution
try:
    # Get values from widgets
    source_table = dbutils.widgets.get("source_table")
    target_table = dbutils.widgets.get("target_table")
    truncate = dbutils.widgets.get("truncate")

    # Validate inputs
    if not all([source_table, target_table]):
        raise ValueError("Both Source Table and Target Table fields must be filled.")

    # Execute the ingestion function
    success, message = ingest_data(source_table, target_table, truncate)
    
    if success:
        print("Ingestion process completed successfully!")
        print(message)
    else:
        print("Ingestion process failed.")
        print(message)
except Exception as e:
    logger.error("Ingestion process failed", exc_info=True)
    print(f"Error: {str(e)}")
