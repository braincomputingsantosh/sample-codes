import requests
import pandas as pd
import sqlite3
from sqlalchemy import create_engine

# Configuration
API_KEY = "YOUR_CENSUS_API_KEY"
BASE_URL = "https://api.census.gov/data"
YEAR = "2020"
DATASET = "acs/acs5"  # Adjust based on the specific dataset you need
SQLITE_DB = "census_data.db"  # Name of the SQLite database file

# List of tables to fetch (adjust based on your needs)
TABLES = ["PCT1", "PCT2", "PCT3", "PCT4", "PCT10", "PCT12", "PCT19", "P9", "P11", "H11", "HCT1", "HCT3"]

def fetch_census_data(table):
    url = f"{BASE_URL}/{YEAR}/{DATASET}"
    params = {
        "get": f"group({table})",
        "for": "tract:*",
        "in": "state:*",
        "key": API_KEY
    }
    response = requests.get(url, params=params)
    if response.status_code == 200:
        data = response.json()
        df = pd.DataFrame(data[1:], columns=data[0])
        return df
    else:
        print(f"Error fetching data for table {table}: {response.status_code}")
        return None

def create_table(conn, table_name, df):
    # Create a table based on the DataFrame structure
    columns = [f"{col} TEXT" for col in df.columns]
    create_table_sql = f"CREATE TABLE IF NOT EXISTS {table_name} ({', '.join(columns)})"
    conn.execute(create_table_sql)

def main():
    # Create SQLite database and connection
    engine = create_engine(f"sqlite:///{SQLITE_DB}")
    conn = sqlite3.connect(SQLITE_DB)

    for table in TABLES:
        print(f"Fetching data for table {table}...")
        df = fetch_census_data(table)
        
        if df is not None:
            print(f"Creating table and uploading data for {table} to SQLite...")
            table_name = table.lower()
            create_table(conn, table_name, df)
            
            # Use to_sql to insert the data 707ce89056798d5cb2db9258299ca23cb8d0f7ca
            df.to_sql(table_name, engine, if_exists='replace', index=False)
            print(f"Table {table} created and data uploaded successfully.")
        
    conn.close()
    print("Data fetching and uploading to SQLite complete.")

if __name__ == "__main__":
    main()
