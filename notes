# Databricks notebook source
import requests
import json

# COMMAND ----------

def get_current_user_groups():
    try:
        # Get the Databricks host and token
        host = dbutils.notebook.entry_point.getDbutils().notebook().getContext().apiUrl().getOrElse(None)
        token = dbutils.notebook.entry_point.getDbutils().notebook().getContext().apiToken().getOrElse(None)

        print(f"Debug: Host URL - {host}")  # Debug print

        # Set up the headers for API requests
        headers = {
            'Authorization': f'Bearer {token}',
            'Content-Type': 'application/json',
        }

        # Get the current user's information
        current_user_response = requests.get(f'{host}/api/2.0/preview/scim/v2/Me', headers=headers)
        print(f"Debug: Current User API Response Status - {current_user_response.status_code}")  # Debug print
        current_user_response.raise_for_status()  # Raise an exception for bad responses
        current_user = current_user_response.json()
        user_id = current_user['id']
        print(f"Debug: Current User ID - {user_id}")  # Debug print

        # Get the list of groups
        groups_response = requests.get(f'{host}/api/2.0/preview/scim/v2/Groups', headers=headers)
        print(f"Debug: Groups API Response Status - {groups_response.status_code}")  # Debug print
        groups_response.raise_for_status()  # Raise an exception for bad responses
        groups = groups_response.json()

        # Check which groups the user belongs to
        user_groups = []
        for group in groups.get('Resources', []):
            for member in group.get('members', []):
                if member['value'] == user_id:
                    user_groups.append(group['displayName'])

        print(f"Debug: Total groups found - {len(groups.get('Resources', []))}")  # Debug print
        print(f"Debug: User groups found - {len(user_groups)}")  # Debug print

        return user_groups

    except Exception as e:
        print(f"An error occurred: {str(e)}")
        return None

# COMMAND ----------

user_groups = get_current_user_groups()

if user_groups is not None:
    if user_groups:
        print("You belong to the following Databricks groups:")
        for group in user_groups:
            print(f"- {group}")
    else:
        print("You don't belong to any Databricks groups.")
else:
    print("Failed to retrieve group information. Please check the error message above.")

# COMMAND ----------

# Optional: Display the groups in a more visually appealing way
from pyspark.sql.types import StringType
from pyspark.sql.functions import lit

if user_groups is not None:
    if user_groups:
        df = spark.createDataFrame([(group,) for group in user_groups], ["Group Name"])
    else:
        df = spark.createDataFrame([("You don't belong to any Databricks groups.",)], ["Message"])
else:
    df = spark.createDataFrame([("Failed to retrieve group information.",)], ["Message"])

display(df)
